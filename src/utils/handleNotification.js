import { getMessaging, getToken, onMessage, requestPermission, onTokenRefresh } from '@react-native-firebase/messaging';
import { getApp } from '@react-native-firebase/app';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import { Alert } from 'react-native';
import { getInstallations } from 'firebase/installations';// ‚úÖ Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o t·ª´ ng∆∞·ªùi d√πng
import app from '@react-native-firebase/app';
import installations from "@react-native-firebase/installations";
export const requestUserPermission = async () => {
  try {
    const messaging = getMessaging(getApp());
    const authStatus = await requestPermission(messaging);

    if (authStatus === 1 || authStatus === 2) { // 1 = AUTHORIZED, 2 = PROVISIONAL
      console.log('‚úÖ Quy·ªÅn th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c c·∫•p.');
      await new HandleNotification().getFcmToken();
    } else {
      console.log('üö´ Ng∆∞·ªùi d√πng t·ª´ ch·ªëi quy·ªÅn th√¥ng b√°o.');
    }
  } catch (error) {
    console.error('‚ö†Ô∏è L·ªói khi y√™u c·∫ßu quy·ªÅn th√¥ng b√°o:', error);
  }
};

// ‚úÖ L·∫Øng nghe th√¥ng b√°o ngay c·∫£ khi app ƒëang m·ªü
export const listenForMessages = () => {
  try {
    const messaging = getMessaging(getApp());

    onMessage(messaging, (remoteMessage) => {
      console.log('üì© Nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o:', remoteMessage);
      Alert.alert(remoteMessage.notification.title, remoteMessage.notification.body);
    });
  } catch (error) {
    console.error('‚ö†Ô∏è L·ªói khi l·∫Øng nghe th√¥ng b√°o:', error);
  }
};

// ‚úÖ G·ª≠i th√¥ng b√°o ƒë·∫øn thi·∫øt b·ªã
export const sendNotification = async () => {
  let fcmToken = await AsyncStorage.getItem('fcmtoken');

  try {
    const message = {
      message: {
        token: fcmToken,  // Thay b·∫±ng FCM token c·ªßa thi·∫øt b·ªã
        notification: {
          title: "üì¢ L·ªùi nh·∫Øc ki·ªÉm tra s·ª©c kh·ªèe",
          body: "ƒê√£ ƒë·∫øn l√∫c ki·ªÉm tra huy·∫øt √°p c·ªßa b·∫°n!",
        },
        android: {
          priority: "high", // Gi√∫p tƒÉng ƒë·ªô ∆∞u ti√™n khi app t·∫Øt
          notification: {
            sound: "default",
            channel_id: "health_reminder",  // T·∫°o k√™nh th√¥ng b√°o tr√™n Android 8+
          }
        },
        apns: {
          payload: {
            aps: {
              sound: "default",
              contentAvailable: true,
            }
          }
        }
      }
    };

    await axios.post('https://fcm.googleapis.com/v1/projects/pushnotification-19d2c/messages:send', message, {
      headers: {
        'Authorization': 'Bearer ya29.a0AXeO80Q7UinJXtJUSZOgFKflUZRB4e6nWtf628tvs5kM5g3gZvsWiJpqwBbjNBH8RyEWseMvlsaLFXWxWpoo3jgl7R4xiFzU_oJnWDT6l-JUi-pYDS7OpJKw0-LrH5V6j-EMJNnrlK0AN6PUdCZ5R3C9eAT-jwB7FflOu0gOL331RgaCgYKAc0SARISFQHGX2MiSS6wEKaRFkcseJhWJ2DBog0181',
        'Content-Type': 'application/json',
      }
    });

    console.log("‚úÖ Th√¥ng b√°o ƒë√£ g·ª≠i th√†nh c√¥ng.");
    listenForMessages();
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói khi g·ª≠i th√¥ng b√°o:", error);
  }
};

export class HandleNotification {
  // ‚úÖ L·∫•y v√† l∆∞u FCM Token
  async getFcmToken() {
    try {
      const messaging = getMessaging(getApp());
      let fcmToken = await AsyncStorage.getItem('fcmtoken');

      if (!fcmToken) {
        console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y FCM Token, ƒëang l·∫•y t·ª´ Firebase...');
        fcmToken = await getToken(messaging);

        if (fcmToken) {
          await AsyncStorage.setItem('fcmtoken', fcmToken);
          console.log('‚úÖ FCM Token ƒë√£ l∆∞u:', fcmToken);
        } else {
          console.log('üö´ Kh√¥ng l·∫•y ƒë∆∞·ª£c FCM Token t·ª´ Firebase.');
        }
      } else {
        console.log('‚úÖ FCM Token ƒë√£ t·ªìn t·∫°i:', fcmToken);
      }
      try {
        const installationId = await installations().getId();
        console.log("Firebase Installation ID:", installationId);
      } catch (error) {
        console.error("L·ªói khi l·∫•y Installation ID:", error);
      }
      // üîÑ L·∫Øng nghe s·ª± ki·ªán c·∫≠p nh·∫≠t Token
      onTokenRefresh(messaging, async (newToken) => {
        console.log('üîÑ FCM Token c·∫≠p nh·∫≠t:', newToken);
        await AsyncStorage.setItem('fcmtoken', newToken);
      });

    } catch (error) {
      console.error('‚ö†Ô∏è L·ªói khi l·∫•y FCM token:', error);
    }
  }
}
